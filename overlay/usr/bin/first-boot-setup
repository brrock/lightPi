#!/bin/bash
set -euo pipefail

CONFIG_FILE="/lightPi.txt"
MARKER_FILE="/etc/first-boot-done"

# --- Logging helper ---
log() {
  echo -e "$1"
}

error_exit() {
  echo -e "‚ùå ERROR: $1" >&2
  exit 1
}

# --- Check if this is the first boot ---
if [ -f "$MARKER_FILE" ]; then
  log "‚úÖ First boot setup already completed. Skipping."
  exit 0
fi

# --- Check if config file exists ---
if [ ! -f "$CONFIG_FILE" ]; then
  error_exit "Config file $CONFIG_FILE not found. Exiting."
fi

# --- Load config ---
log "üìÑ Loading config from $CONFIG_FILE..."
# shellcheck source=/lightPi.txt
source "$CONFIG_FILE"

# --- Set Locale ---
if [ -n "${LOCALE:-}" ]; then
  log "üåê Configuring locale: $LOCALE"

  if grep -q "^# *$LOCALE" /etc/locale.gen; then
    log "üîß Enabling $LOCALE in /etc/locale.gen"
    sed -i "s/^# *\($LOCALE\)/\1/" /etc/locale.gen
  elif ! grep -q "^$LOCALE" /etc/locale.gen; then
    log "‚ûï Adding $LOCALE to /etc/locale.gen"
    echo "$LOCALE UTF-8" >> /etc/locale.gen
  fi

  log "üõ†Ô∏è Running locale-gen..."
  locale-gen || error_exit "locale-gen failed."

  log "üåê Setting system locale to $LOCALE"
  echo "LANG=$LOCALE" > /etc/locale.conf
else
  log "‚ö†Ô∏è LOCALE not specified. Skipping locale setup."
fi

# --- Set Hostname (Arch-style) ---
if [ -n "${HOSTNAME:-}" ]; then
  log "üñ•Ô∏è Setting hostname to $HOSTNAME"
  echo "$HOSTNAME" > /etc/hostname
  sed -i "s/127.0.0.1.*/127.0.0.1   $HOSTNAME localhost/" /etc/hosts
else
  log "‚ö†Ô∏è HOSTNAME not specified. Skipping hostname setup."
fi

# --- Set Timezone ---
if [ -n "${TIMEZONE:-}" ]; then
  log "üïí Setting timezone to $TIMEZONE"
  ln -sf "/usr/share/zoneinfo/$TIMEZONE" /etc/localtime
else
  log "‚ö†Ô∏è TIMEZONE not specified. Skipping timezone setup."
fi

# --- Network Setup (if nmcli is available) ---
if command -v nmcli >/dev/null 2>&1; then
  log "üì° NetworkManager is available."

  case "${NETWORK_TYPE:-}" in
    wifi)
      if [ -n "${WIFI_SSID:-}" ] && [ -n "${WIFI_PASSWORD:-}" ]; then
        log "üì∂ Connecting to Wi-Fi: $WIFI_SSID"
        if ! nmcli device wifi connect "$WIFI_SSID" password "$WIFI_PASSWORD"; then
          error_exit "Failed to connect to Wi-Fi."
        fi
      else
        log "‚ö†Ô∏è WIFI_SSID or WIFI_PASSWORD missing. Skipping Wi-Fi setup."
      fi
      ;;
    ethernet)
      log "üîå Connecting via Ethernet (DHCP)"
      if ! nmcli device connect eth0; then
        error_exit "Failed to bring up Ethernet."
      fi
      ;;
    "")
      log "‚ö†Ô∏è NETWORK_TYPE is not specified. Skipping network setup."
      ;;
    *)
      log "‚ö†Ô∏è Unknown NETWORK_TYPE: $NETWORK_TYPE. Skipping network setup."
      ;;
  esac
else
  log "‚ö†Ô∏è nmcli not found. Skipping network setup."
fi

# --- Create user and delete default 'arch' user ---
if [ -n "${NEW_USERNAME:-}" ] && [ -n "${NEW_PASSWORD:-}" ]; then
  log "üë§ Creating new user: $NEW_USERNAME"

  # Create user with home directory
  useradd -m -G wheel -s /bin/bash "$NEW_USERNAME" || \
    error_exit "Failed to create user $NEW_USERNAME."

  # Set password
  echo "$NEW_USERNAME:$NEW_PASSWORD" | chpasswd || \
    error_exit "Failed to set password for $NEW_USERNAME."

  # Ensure sudo access for wheel group
  if command -v sudo >/dev/null 2>&1; then
    log "üõ°Ô∏è Granting sudo access to $NEW_USERNAME"
    sed -i 's/^# *%wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers || \
      error_exit "Failed to update /etc/sudoers for sudo rights."
  else
    log "‚ö†Ô∏è sudo not found. Please install it manually if needed."
  fi

  # Remove default 'arch' user, if it exists
  if id "alarm" >/dev/null 2>&1; then
    log "üóëÔ∏è Removing default 'alarm' user..."
    userdel -r alarm || error_exit "Failed to remove default 'alarm' user."
  else
    log "‚ÑπÔ∏è Default 'alarm' user not found. Skipping removal."
  fi
else
  log "‚ö†Ô∏è NEW_USERNAME or NEW_PASSWORD not specified. Skipping user creation and deletion."
fi

# --- Finalize ---
touch "$MARKER_FILE" || error_exit "Failed to create marker file."
log "‚úÖ First boot setup complete."
